# Generated by CodiumAI

import datetime as dt

import pytest

from modules.general_functions import end_of_month

"""
Code Analysis

Objective:
The objective of the function is to find the last day of the month for a given datetime input.

Inputs:
- any_day (dt.datetime): a datetime value in question.

Flow:
1. The function replaces the day of the input datetime with 28 and adds 4 days to get to the next month.
2. The function then subtracts the number of the current day from the next month to get the last day of the current month.
3. The function returns the datetime value where the day is the last day of that month.

Outputs:
- dt.datetime: datetime value where the day is the last day of that month.

Additional aspects:
- The function uses the datetime module to perform date calculations.
- The function uses the timedelta function to add and subtract days from a datetime object.
- The function assumes that the day 28 exists in every month and that 4 days later, it's always next month.
"""


class TestLastDayOfMonth:
    """test suite"""

    def test_last_day_of_month_happy_path(self) -> None:
        """Tests that the function returns the correct last day of the month for a given datetime.

        tags: [happy path]"""

        input_date = dt.datetime(2021, 5, 15)
        expected_output = dt.datetime(2021, 5, 31)
        assert end_of_month(input_date) == expected_output

    def test_last_day_of_month_edge_case(self) -> None:
        """Tests that the function correctly handles february 28th in both leap and non-leap years, as well as december 31st.

        tags: [edge case]"""

        input_date1 = dt.datetime(2020, 2, 28)
        expected_output1 = dt.datetime(2020, 2, 29)
        assert end_of_month(input_date1) == expected_output1

        input_date2 = dt.datetime(2021, 2, 28)
        expected_output2 = dt.datetime(2021, 2, 28)
        assert end_of_month(input_date2) == expected_output2

        input_date3 = dt.datetime(2021, 12, 31)
        expected_output3 = dt.datetime(2021, 12, 31)
        assert end_of_month(input_date3) == expected_output3

    def test_last_day_of_month_general_behavior(self) -> None:
        """Tests that the function does not modify the input datetime object and handles unexpected input formats appropriately.

        tags: [general behavior]"""

        input_date = "2021-05-15"
        with pytest.raises(TypeError):
            end_of_month(input_date)

        input_date = dt.datetime(2021, 5, 15)
        end_of_month(input_date)
        assert input_date == dt.datetime(2021, 5, 15)

    def test_last_day_of_month_timezone(self) -> None:
        """Tests that the function handles timezone differences between input and output datetime objects correctly.

        tags: [other possible issue]"""
        # create datetime object with timezone
        input_datetime = dt.datetime(2021, 5, 15, 12, 0, 0, tzinfo=dt.timezone.utc)
        expected_output = dt.datetime(2021, 5, 31, 12, 0, 0, tzinfo=dt.timezone.utc)
        assert end_of_month(input_datetime) == expected_output
